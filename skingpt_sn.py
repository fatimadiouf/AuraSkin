import streamlit as st
from PIL import Image, ImageEnhance
import pandas as pd
import datetime
import os
import numpy as np
import cv2
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# --- Configuration de la page ---
st.set_page_config(
    page_title="AuraSkin - IA Dermatologique Peau Noire",
    page_icon="üåø",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- CSS personnalis√© ---
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #2E8B57;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .diagnostic-box {
        background-color: #f0f8f0;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #2E8B57;
        margin: 1rem 0;
    }
    .product-box {
        background-color: #fffaf0;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #FFA500;
        margin: 1rem 0;
    }
    .warning-box {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #ffc107;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #c3e6cb;
    }
    .analysis-box {
        background-color: #e3f2fd;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #2196f3;
        margin: 1rem 0;
    }
    .emotional-box {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin: 2rem 0;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        border: 1px solid #dee2e6;
    }
</style>
""", unsafe_allow_html=True)

# --- Fonctions de d√©tection R√âELLE ---
def validate_image_quality(image):
    """Valide la qualit√© de l'image pour l'analyse"""
    issues = []
    img_array = np.array(image)
    
    # V√©rification de la nettet√©
    gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
    sharpness = cv2.Laplacian(gray, cv2.CV_64F).var()
    
    if sharpness < 100:
        issues.append("floue")
    
    # V√©rification de la luminosit√©
    brightness = np.mean(gray)
    if brightness < 50:
        issues.append("trop sombre")
    elif brightness > 200:
        issues.append("trop lumineuse")
    
    return issues, sharpness, brightness

def detect_hyperpigmentation(image):
    """
    D√©tection R√âELLE de l'hyperpigmentation par analyse de couleur
    """
    # Conversion en array numpy
    img_array = np.array(image)
    original = img_array.copy()
    
    # Conversion en diff√©rents espaces de couleur
    hsv = cv2.cvtColor(img_array, cv2.COLOR_RGB2HSV)
    lab = cv2.cvtColor(img_array, cv2.COLOR_RGB2LAB)
    
    # --- D√©tection des taches brunes (hyperpigmentation) ---
    lower_brown1 = np.array([0, 30, 20])
    upper_brown1 = np.array([30, 150, 180])
    
    lower_brown2 = np.array([0, 0, 0])
    upper_brown2 = np.array([180, 255, 100])
    
    mask1 = cv2.inRange(hsv, lower_brown1, upper_brown1)
    mask2 = cv2.inRange(hsv, lower_brown2, upper_brown2)
    brown_mask = cv2.bitwise_or(mask1, mask2)
    
    # M√©thode 2: Analyse de la luminance dans l'espace LAB
    L_channel = lab[:,:,0]
    _, dark_mask = cv2.threshold(L_channel, 60, 255, cv2.THRESH_BINARY_INV)
    
    # Combinaison des masques
    combined_mask = cv2.bitwise_or(brown_mask, dark_mask)
    
    # Nettoyage du masque
    kernel = np.ones((3,3), np.uint8)
    combined_mask = cv2.morphologyEx(combined_mask, cv2.MORPH_OPEN, kernel)
    combined_mask = cv2.morphologyEx(combined_mask, cv2.MORPH_CLOSE, kernel)
    
    # D√©tection des contours
    contours, _ = cv2.findContours(combined_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filtrage des petits contours (bruit)
    min_contour_area = 50
    significant_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > min_contour_area]
    
    # Calcul des m√©triques
    total_pixels = img_array.shape[0] * img_array.shape[1]
    hyperpigmentation_pixels = np.count_nonzero(combined_mask)
    hyperpigmentation_ratio = hyperpigmentation_pixels / total_pixels
    
    # Nombre de taches d√©tect√©es
    spot_count = len(significant_contours)
    
    # Cr√©ation de l'image de visualisation
    visualization = original.copy()
    cv2.drawContours(visualization, significant_contours, -1, (255, 0, 0), 2)
    
    # Calcul de la s√©v√©rit√© moyenne
    if spot_count > 0:
        avg_spot_size = sum(cv2.contourArea(cnt) for cnt in significant_contours) / spot_count
    else:
        avg_spot_size = 0
    
    return {
        'ratio': hyperpigmentation_ratio,
        'spot_count': spot_count,
        'avg_spot_size': avg_spot_size,
        'mask': combined_mask,
        'visualization': visualization,
        'contours': significant_contours
    }

def detect_acne(image):
    """
    D√©tection R√âELLE de l'acn√© par analyse de texture et couleur
    """
    img_array = np.array(image)
    gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
    
    # D√©tection des imperfections rouges/inflamm√©es
    hsv = cv2.cvtColor(img_array, cv2.COLOR_RGB2HSV)
    
    # Plage pour les rougeurs (acn√© inflamm√©e)
    lower_red1 = np.array([0, 50, 50])
    upper_red1 = np.array([10, 255, 255])
    lower_red2 = np.array([170, 50, 50])
    upper_red2 = np.array([180, 255, 255])
    
    mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
    mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
    redness_mask = cv2.bitwise_or(mask1, mask2)
    
    # D√©tection des contours circulaires (boutons)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    circles = cv2.HoughCircles(blurred, cv2.HOUGH_GRADIENT, 1, 20,
                              param1=50, param2=30, minRadius=5, maxRadius=30)
    
    acne_count = 0
    if circles is not None:
        acne_count = len(circles[0])
    
    return {
        'acne_count': acne_count,
        'redness_ratio': np.count_nonzero(redness_mask) / (img_array.shape[0] * img_array.shape[1]),
        'redness_mask': redness_mask
    }

def analyze_skin_conditions(image):
    """
    Analyse COMPL√àTE de toutes les conditions cutan√©es
    """
    hyperpigmentation_data = detect_hyperpigmentation(image)
    acne_data = detect_acne(image)
    
    return {
        'hyperpigmentation': hyperpigmentation_data,
        'acne': acne_data
    }

def get_diagnosis_and_recommendation(analysis_results, age, skin_type):
    """
    G√©n√®re le diagnostic et les recommandations bas√©s sur l'analyse R√âELLE
    """
    hyper = analysis_results['hyperpigmentation']
    acne = analysis_results['acne']
    
    # --- Diagnostic Principal ---
    conditions = []
    
    # Diagnostic hyperpigmentation
    if hyper['ratio'] > 0.15:
        conditions.append("Signes importants d'hyperpigmentation")
        hyper_severity = "importants"
    elif hyper['ratio'] > 0.08:
        conditions.append("Signes mod√©r√©s d'hyperpigmentation")
        hyper_severity = "mod√©r√©s"
    elif hyper['ratio'] > 0.03:
        conditions.append("Signes l√©gers d'hyperpigmentation")
        hyper_severity = "l√©gers"
    
    # Diagnostic acn√©
    if acne['acne_count'] > 10:
        conditions.append("Pr√©sence notable d'acn√©")
        acne_severity = "notable"
    elif acne['acne_count'] > 5:
        conditions.append("Pr√©sence mod√©r√©e d'acn√©")
        acne_severity = "mod√©r√©e"
    elif acne['acne_count'] > 2:
        conditions.append("Pr√©sence l√©g√®re d'acn√©")
        acne_severity = "l√©g√®re"
    
    if not conditions:
        conditions.append("Peau pr√©sentant peu d'imperfections")
    
    diagnosis = " + ".join(conditions)
    
    # --- Produits Recommand√©s ---
    products = []
    
    # Produits pour hyperpigmentation
    if hyper['ratio'] > 0.03:
        if hyper_severity == "importants":
            products.append("S√âRUM INTENSIF ANTI-TACHES + CR√àME √âCLAT NUIT")
        elif hyper_severity == "mod√©r√©s":
            products.append("S√âRUM √âCLAT ANTI-TACHES")
        else:
            products.append("SOIN √âQUILIBRANT PEAUX SENSIBLES")
    
    # Produits pour acn√©
    if acne['acne_count'] > 2:
        if acne_severity == "notable":
            products.append("GEL PURIFIANT INTENSIF + MASQUE D√âTOX")
        elif acne_severity == "mod√©r√©e":
            products.append("GEL PURIFIANT QUOTIDIEN")
        else:
            products.append("NETTOYANT DOUX ACNE-STOP")
    
    if not products:
        products.append("CR√àME HYDRATANTE QUOTIDIENNE")
    
    recommended_product = " + ".join(products)
    
    # --- Conseils Personnalis√©s ---
    advice = []
    
    if hyper['ratio'] > 0.03:
        advice.append(f"‚Ä¢ **Analyse cutan√©e :** {hyper['ratio']:.1%} de la peau pr√©sente des signes d'hyperpigmentation ({hyper['spot_count']} zones concern√©es)")
        advice.append("‚Ä¢ Appliquer les soins √©claircissants matin et soir")
        advice.append("‚Ä¢ PROTECTION SOLAIRE SPF 50+ obligatoire pour pr√©venir l'aggravation")
        advice.append("‚Ä¢ √âviter l'exposition solaire directe entre 12h-16h")
    
    if acne['acne_count'] > 2:
        advice.append(f"‚Ä¢ **Analyse cutan√©e :** {acne['acne_count']} imperfections d√©tect√©es")
        advice.append("‚Ä¢ Nettoyer la peau matin et soir avec un produit doux")
        advice.append("‚Ä¢ Ne pas percer les boutons pour √©viter les marques")
        advice.append("‚Ä¢ Changer les taies d'oreiller 2 fois par semaine")
    
    if not (hyper['ratio'] > 0.03 or acne['acne_count'] > 2):
        advice.append("‚Ä¢ Maintenir une routine de soin √©quilibr√©e")
        advice.append("‚Ä¢ Nettoyer quotidiennement avec un produit adapt√©")
        advice.append("‚Ä¢ Hydrater matin et soir pour pr√©server la barri√®re cutan√©e")
        advice.append("‚Ä¢ Protection solaire pr√©ventive m√™me par temps couvert")
    
    advice_text = "\n".join(advice)
    
    # --- Recommandation M√©dicale ---
    needs_doctor = (hyper['ratio'] > 0.15 or acne['acne_count'] > 10 or age > 50)
    medical_advice = "üîî **Nous recommandons une consultation dermatologique pour un suivi approfondi**" if needs_doctor else ""
    
    return diagnosis, recommended_product, advice_text, medical_advice

# --- Interface principale ---
st.markdown('<h1 class="main-header">üåø AuraSkin - IA Dermatologique Sp√©cialis√©e Peau Noire</h1>', unsafe_allow_html=True)

# --- Section √©motionnelle ---
st.markdown('<div class="emotional-box">', unsafe_allow_html=True)
st.markdown("""
<h2 style='color: white; text-align: center;'>üåü Rejoignez la R√©volution AuraSkin üåü</h2>

<p style='font-size: 1.2rem; text-align: center;'>
<strong>Aidez-nous √† construire la premi√®re IA dermatologique sp√©cialis√©e pour les peaux noires !</strong>
</p>

<p>
Notre intelligence artificielle actuelle a une pr√©cision de <strong>52%</strong> - 
chaque diagnostic que vous effectuez nous permet de l'am√©liorer et de la perfectionner.
</p>

<p style='font-style: italic;'>
Votre participation aujourd'hui contribue √† cr√©er des solutions de soins cutan√©s 
plus pr√©cises et adapt√©es pour toute la communaut√© noire demain.
</p>

<p>
<strong>üìû WhatsApp :</strong> +221 76 484 40 51<br>
<strong>üìß Email :</strong> diouffatou452@gmail.com
</p>
""", unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)

# --- Sidebar ---
with st.sidebar:
    st.image("https://via.placeholder.com/200x200/2E8B57/FFFFFF?text=AURASKIN", width=150)
    st.title("üìã Votre Profil")
    
    age = st.slider("√Çge", 15, 70, 25)
    skin_type = st.selectbox("Type de peau", 
                           ["Peau grasse", "Peau s√®che", "Peau mixte", "Peau normale", "Je ne sais pas"])
    
    st.markdown("---")
    st.info("""
    **üéØ Notre Mission :**
    ‚Ä¢ D√©velopper une IA sp√©cialis√©e peaux noires
    ‚Ä¢ Am√©liorer les diagnostics dermatologiques
    ‚Ä¢ Offrir des solutions adapt√©es
    """)
    
    st.markdown("---")
    st.subheader("üìû Nous Contacter")
    st.write("""
    **WhatsApp :** +221 76 484 40 51
    **Email :** diouffatou452@gmail.com
    **Dakar, S√©n√©gal**
    """)

# --- Section upload et analyse ---
col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("üì∏ Analyse de Votre Peau")
    
    uploaded_file = st.file_uploader(
        "T√©l√©chargez une photo claire de votre visage", 
        type=["jpg", "jpeg", "png"],
        help="Photo nette, bon √©clairage, visage bien visible"
    )

    if uploaded_file:
        image = Image.open(uploaded_file)
        st.image(image, caption="Photo t√©l√©charg√©e", use_column_width=True)
        
        # Validation de la qualit√©
        with st.spinner("üîç Analyse de la qualit√© de l'image..."):
            issues, sharpness, brightness = validate_image_quality(image)
            
            if issues:
                st.markdown('<div class="warning-box">', unsafe_allow_html=True)
                st.warning(f"**Qualit√© d'image √† am√©liorer :** Votre photo est {', '.join(issues)}.")
                st.write("""
                **Conseils pour une meilleure photo :**
                ‚Ä¢ Prenez la photo √† la lumi√®re du jour
                ‚Ä¢ Tenez le t√©l√©phone stable
                ‚Ä¢ Rapprochez-vous l√©g√®rement
                ‚Ä¢ √âvitez les ombres sur le visage
                """)
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.success("‚úÖ Qualit√© d'image excellente pour l'analyse !")

with col2:
    if uploaded_file:
        issues, _, _ = validate_image_quality(image)
        
        if not issues:
            st.subheader("üéØ R√©sultats de l'Analyse")
            
            # Analyse R√âELLE avec indicateur de progression
            with st.spinner("üß† AuraSkin analyse votre peau en d√©tail..."):
                # Analyse compl√®te
                analysis_results = analyze_skin_conditions(image)
                
                # Diagnostic et recommandations
                diagnosis, product, advice, medical_advice = get_diagnosis_and_recommendation(
                    analysis_results, age, skin_type
                )
            
            # Affichage des r√©sultats
            st.markdown('<div class="diagnostic-box">', unsafe_allow_html=True)
            st.write("**üìã NOTRE ANALYSE :**")
            st.success(f"**{diagnosis}**")
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Produit recommand√©
            st.markdown('<div class="product-box">', unsafe_allow_html=True)
            st.write("**üí´ PRODUIT RECOMMAND√â :**")
            st.info(f"**{product}**")
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Affichage de l'analyse d√©taill√©e
            with st.expander("üîç **D√©tails de l'analyse technique**", expanded=True):
                col_anal1, col_anal2 = st.columns(2)
                
                with col_anal1:
                    st.write("**üìä Hyperpigmentation :**")
                    hyper = analysis_results['hyperpigmentation']
                    st.metric("Surface concern√©e", f"{hyper['ratio']:.1%}")
                    st.metric("Zones d√©tect√©es", hyper['spot_count'])
                
                with col_anal2:
                    st.write("**üìä Acn√© & Imperfections :**")
                    acne = analysis_results['acne']
                    st.metric("Imperfections", acne['acne_count'])
                    st.metric("Rougeurs", f"{acne['redness_ratio']:.1%}")
            
            # Conseils personnalis√©s
            st.markdown('<div class="analysis-box">', unsafe_allow_html=True)
            st.write("**üí° CONSEILS PERSONNALIS√âS :**")
            st.write(advice)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Recommandation m√©dicale
            if medical_advice:
                st.warning(medical_advice)

# --- Visualisation de la d√©tection ---
if uploaded_file and not issues:
    st.markdown("---")
    st.subheader("üëÅÔ∏è Visualisation de la D√©tection")
    
    col_vis1, col_vis2 = st.columns(2)
    
    with col_vis1:
        st.image(image, caption="üì∑ Photo originale", use_column_width=True)
    
    with col_vis2:
        hyper = analysis_results['hyperpigmentation']
        st.image(hyper['visualization'], caption="üî¥ Zones d'hyperpigmentation d√©tect√©es", use_column_width=True)

# --- Section enregistrement et produit gratuit ---
if uploaded_file and not issues:
    st.markdown("---")
    st.subheader("üéÅ Recevez Votre Produit AuraSkin")
    
    # Formulaire de contact pour l'envoi
    with st.form("contact_form"):
        st.write("**üìù Informations pour votre produit**")
        
        col1, col2 = st.columns(2)
        with col1:
            customer_name = st.text_input("Nom complet*")
            customer_phone = st.text_input("T√©l√©phone*", placeholder="+221 XX XXX XX XX")
        with col2:
            customer_email = st.text_input("Email", placeholder="votre@email.com")
            customer_city = st.selectbox("Ville*", 
                ["Dakar", "Thi√®s", "Mbour", "Saint-Louis", "Autre"])
        
        delivery_option = st.radio("Comment souhaitez-vous recevoir votre produit?*",
            ["üöó Livraison √† domicile (frais de livraison applicables)", 
             "üè™ Retrait chez AuraSkin Dakar"])
        
        # Engagement suivi
        st.markdown("---")
        st.write("**üìä Engagement d'am√©lioration**")
        follow_up_agreement = st.checkbox("Je m'engage √† partager mon am√©lioration apr√®s 1 semaine d'utilisation*", value=True)
        st.caption("Votre feedback nous aide √† am√©liorer AuraSkin pour toute la communaut√©")
        
        submitted = st.form_submit_button("üéÅ Recevoir mon produit AuraSkin", type="primary")
    
    if submitted:
        if not customer_name or not customer_phone or not follow_up_agreement:
            st.error("‚ùå Veuillez remplir les champs obligatoires (*)")
        else:
            # G√©n√©ration du code client unique
            timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S_%f')
            customer_id = f"AURA{timestamp[:8]}"
            coupon_code = f"AURA{timestamp[:6]}GIFT"
            
            # Sauvegarde de l'image
            os.makedirs("auraskin_data/images", exist_ok=True)
            os.makedirs("auraskin_data/clients", exist_ok=True)
            image_filename = f"auraskin_data/images/{timestamp}.jpg"
            image.save(image_filename)
            
            # Pr√©paration des donn√©es client
            hyper = analysis_results['hyperpigmentation']
            acne = analysis_results['acne']
            
            client_data = {
                "customer_id": [customer_id],
                "coupon_code": [coupon_code],
                "timestamp": [timestamp],
                "name": [customer_name],
                "phone": [customer_phone],
                "email": [customer_email],
                "city": [customer_city],
                "age": [age],
                "skin_type": [skin_type],
                "delivery_option": [delivery_option],
                "hyperpigmentation_ratio": [hyper['ratio']],
                "hyperpigmentation_spots": [hyper['spot_count']],
                "acne_count": [acne['acne_count']],
                "diagnosis": [diagnosis],
                "recommended_product": [product],
                "follow_up_agreement": [follow_up_agreement],
                "status": ["en_attente"],
                "image_path": [image_filename]
            }
            
            # Sauvegarde dans CSV clients
            client_df = pd.DataFrame(client_data)
            clients_path = "auraskin_data/clients/clients_data.csv"
            
            if os.path.exists(clients_path):
                client_df.to_csv(clients_path, mode="a", header=False, index=False)
            else:
                client_df.to_csv(clients_path, index=False)
            
            # Message de confirmation
            st.markdown('<div class="success-box">', unsafe_allow_html=True)
            st.success(f"""
            ‚úÖ **Votre produit AuraSkin est r√©serv√© !**
            
            **üì¶ VOTRE COMMANDE :**
            üéÅ **Produit :** {product}
            üî¢ **Code Client :** `{customer_id}`
            üè∑Ô∏è **Code Produit :** `{coupon_code}`
            üë§ **Nom :** {customer_name}
            
            **üìã PROCHAINES √âTAPES :**
            {
                "üöó Livraison √† domicile (frais de livraison applicables)": "Notre √©quipe vous contactera sous 24h pour organiser la livraison",
                "üè™ Retrait chez AuraSkin Dakar": "Pr√©sentez votre code client √† notre centre AuraSkin Dakar"
            }[delivery_option]
            
            **üìû Contactez-nous :**
            üì± **WhatsApp :** +221 76 484 40 51
            üìß **Email :** diouffatou452@gmail.com
            
            **üåü Votre Engagement :**
            Merci de vous engager √† partager votre am√©lioration apr√®s 1 semaine d'utilisation !
            Votre exp√©rience est pr√©cieuse pour am√©liorer AuraSkin.
            """)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Instructions suivi
            st.markdown("---")
            st.subheader("üìä Suivi de Votre Am√©lioration")
            st.info("""
            **Apr√®s 1 semaine d'utilisation, contactez-nous pour partager :**
            
            üì∏ **Envoyez-nous une nouvelle photo** de votre peau
            üí¨ **D√©crivez votre exp√©rience** avec le produit
            ‚≠ê **Notez l'am√©lioration** (1 √† 5 √©toiles)
            
            **Comment nous contacter :**
            ‚Ä¢ **WhatsApp :** +221 76 484 40 51
            ‚Ä¢ **Email :** diouffatou452@gmail.com
            ‚Ä¢ **Message :** "Suivi AuraSkin - [Votre Code Client]"
            
            Votre feedback nous aide √† perfectionner notre IA pour toute la communaut√© !
            """)
            
            # T√©l√©chargement du re√ßu
            receipt = f"""
            RECU AURASKIN
            ====================
            
            CLIENT : {customer_name}
            TELEPHONE : {customer_phone}
            ID CLIENT : {customer_id}
            CODE PRODUIT : {coupon_code}
            
            ANALYSE : {diagnosis}
            PRODUIT RECOMMANDE : {product}
            
            OPTION : {delivery_option}
            DATE : {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}
            
            ENGAGEMENT SUIVI : OUI
            CONTACT SUIVI : +221 76 484 40 51
            
            INSTRUCTIONS :
            - Pr√©sentez ce re√ßu pour obtenir votre produit
            - Contactez-nous apr√®s 1 semaine pour le suivi
            - Valable 30 jours
            - Un produit par personne
            
            Merci de contribuer √† la r√©volution AuraSkin !
            AuraSkin üåø - IA Dermatologique Peau Noire
            """
            
            st.download_button(
                label="üìÑ T√©l√©charger le re√ßu",
                data=receipt,
                file_name=f"re√ßu_auraskin_{customer_id}.txt",
                mime="text/plain"
            )

# --- Section statistiques en temps r√©el ---
st.markdown("---")
st.subheader("üìà Impact de la Communaut√© AuraSkin")

try:
    if os.path.exists("auraskin_data/clients/clients_data.csv"):
        df_stats = pd.read_csv("auraskin_data/clients/clients_data.csv")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Membres AuraSkin", len(df_stats))
        
        with col2:
            if 'hyperpigmentation_ratio' in df_stats.columns:
                avg_hyper = df_stats['hyperpigmentation_ratio'].mean()
                st.metric("Hyperpigmentation moyenne", f"{avg_hyper:.1%}")
        
        with col3:
            engagements = len(df_stats[df_stats['follow_up_agreement'] == True])
            st.metric("Engagements suivi", engagements)
        
        with col4:
            precision = 52 + min(len(df_stats) // 10, 20)  # Augmente avec les donn√©es
            st.metric("Pr√©cision IA actuelle", f"{precision}%", f"+{min(len(df_stats)//10, 20)}%")

except Exception as e:
    st.info("üìä Les statistiques s'afficheront ici apr√®s les premiers membres AuraSkin")

# --- Section am√©lioration IA ---
st.markdown("---")
st.markdown("""
<div class="emotional-box">
<h3>üöÄ Aidez-nous √† Perfectionner AuraSkin</h3>

<p>
<strong>Pr√©cision actuelle : 52% - Objectif : 85%</strong><br>
Chaque diagnostic am√©liore notre intelligence artificielle sp√©cialis√©e peaux noires.
</p>

<p>
Votre participation aujourd'hui cr√©e des solutions plus pr√©cises pour toute notre communaut√© demain.
</p>

<p>
<strong>üìû Contactez-nous :</strong><br>
WhatsApp: +221 76 484 40 51<br>
Email: diouffatou452@gmail.com
</p>
</div>
""", unsafe_allow_html=True)

# --- Footer ---
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p>üåø <strong>AuraSkin</strong> - Intelligence Artificielle Dermatologique Sp√©cialis√©e Peau Noire</p>
    <p><small>üî¨ D√©velopp√©e pour et par la communaut√© noire - Precision en am√©lioration continue</small></p>
    <p><small>‚ö†Ô∏è Cette analyse est informative et ne remplace pas une consultation m√©dicale</small></p>
    <p><small>üìû Contact : +221 76 484 40 51 | üìß diouffatou452@gmail.com</small></p>
</div>
""", unsafe_allow_html=True)